#!/usr/bin/python3
import subprocess
import re
import random
import os
import json
import sys


# If used incorrectly, display usage message and exit
if len(sys.argv) < 2:
	print("\tUsage: python3 gitcloc.py <path/to/git/directory>")
	exit()

gitdir = sys.argv[1]
commit_pattern = re.compile(r'[\da-f]{40}')

# make sure path provided is a git repository
gitlog_out = subprocess.run(["git log"],cwd=gitdir,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
if (gitlog_out.stderr.decode()[0:6] == 'fatal:'[0:6]):
	print("\033[1;31m" + gitlog_out.stderr.decode().strip() + "\033[0m")
	exit()

# Make a temporary directory to copy the repo to.
tmpnum = random.randint(1000000,10000000)
tmpdir = '/tmp/%d' % (tmpnum)
while (os.path.exists(tmpdir)):
	tmpdir = '/tmp/%d' % (random.randint(1000000,10000000))
os.mkdir(tmpdir)

subprocess.run(["cp -r . %s" % (tmpdir)],cwd=gitdir,shell=True)

# Get all the commit hashes
gitlog_out = subprocess.run(["git log"],cwd=tmpdir,shell=True,stdout=subprocess.PIPE)
commits = commit_pattern.findall(gitlog_out.stdout.decode())

# Open the null file for dumping
devnull = open(os.devnull, 'wb')

# Add and commit in the temp copied repo to make sure checkout works fine
subprocess.run(["git add ."],cwd=tmpdir,shell=True,stdout=devnull,stderr=devnull)
subprocess.run(["git commit -m \"gitcloc temp commit %d\"" % (tmpnum)],cwd=tmpdir,shell=True,stdout=devnull,stderr=devnull)

# Iterate through commits, checkout, and call cloc
for commit in commits:
	subprocess.run(["git checkout %s" % (commit)],shell=True,cwd=tmpdir,stdout=devnull,stderr=devnull)
	commit_date_out = subprocess.run(["git log -1 --format=%cd"],shell=True,cwd=tmpdir,stdout=subprocess.PIPE)
	commit_date = ' '.join(commit_date_out.stdout.decode().split(' ')[:-1])
	cloc_out = subprocess.run(["cloc . --json"],shell=True,cwd=tmpdir,stdout=subprocess.PIPE)
	if (len(cloc_out.stdout) == 0):
		continue

	print("Commit: %s... %s" % (commit[0:8], commit_date))

	cloc_dict = json.loads(cloc_out.stdout.decode())
	for code_type in cloc_dict:
		if code_type == 'header':			
			continue
	
		print("\033[1;36m" "%s: %s" "\033[0m" % (code_type,cloc_dict[code_type]["code"]))
	print()
